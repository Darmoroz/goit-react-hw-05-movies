{"version":3,"file":"static/js/687.5085d24d.chunk.js","mappings":"qOAEaA,E,OAAWC,GAAAA,GAAH,sG,gEC+CrB,EA1Ca,WACX,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAUA,OARAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAU,SAAD,OAAUN,EAAV,aACNO,MAAK,YAAyB,IAAdJ,EAAa,EAArBK,KAAQL,KACfC,EAAQD,EACT,IACAM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,GACf,GAAE,CAACb,IAEiB,KAAb,OAAJG,QAAI,IAAJA,OAAA,EAAAA,EAAMW,SAEN,0BACE,uBAAG,8CAMP,SAAChB,EAAD,WACO,OAAJK,QAAI,IAAJA,OAAA,EAAAA,EAAMW,QAAS,IAAf,OACCX,QADD,IACCA,OADD,EACCA,EAAMY,KAAI,YAA2D,IAAxDC,EAAuD,EAAvDA,aAAchB,EAAyC,EAAzCA,GAAIiB,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClD,OACE,2BACE,gBACEC,IACmB,OAAjBJ,EACIK,EADJ,yCAEsCL,GAExCM,IAAKJ,KAEP,wBAAKA,GAAiBD,KACtB,yBAAG,cAAYE,OAVRnB,EAaZ,MAGR,C,mEC3CKuB,E,OAAYC,EAAAA,OAAa,CAC7BC,QAAS,kCAEXF,EAAUG,SAASC,QAAQC,OAA3B,+BALE,uNAOK,IAAMtB,EAAY,SAACuB,GAA2B,IAAjBC,EAAgB,uDAAP,CAAC,EACtCC,EAAUR,EACbS,IAAIH,EAAU,CAAEC,QAAO,UAAMA,KAC7BrB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,IACd,OAAOkB,CACR,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastGrid = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  grid-gap: 8px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovies } from 'services/api';\nimport { CastGrid } from './Cast.styled';\n\nimport image from 'assets/images/no_image.jpg';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    getMovies(`movie/${id}/credits`)\n      .then(({ data: { cast } }) => {\n        setCast(cast);\n      })\n      .catch(error => console.log(error.message));\n  }, [id]);\n\n  if (cast?.length === 0) {\n    return (\n      <div>\n        <p>We don't have any cast for this movie.</p>\n      </div>\n    );\n  }\n\n  return (\n    <CastGrid>\n      {cast?.length > 0 &&\n        cast?.map(({ profile_path, id, name, original_name, character }) => {\n          return (\n            <li key={id}>\n              <img\n                src={\n                  profile_path === null || undefined\n                    ? image\n                    : `https://image.tmdb.org/t/p/w500${profile_path}`\n                }\n                alt={original_name}\n              />\n              <h3>{original_name || name}</h3>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n    </CastGrid>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst ACCESS_TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2ZDc5OTA1N2VkMWUzY2JiZmVjOTBhNzYyZmUxOWQ5OCIsInN1YiI6IjY0OGMyNjg0NTU5ZDIyMDExYzRiMzgwYSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.1RdcZoV5IPYOcFbCXJNJ1aLnntukhilkV6un6kG6ZoU';\n\nconst moviesAPI = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\nmoviesAPI.defaults.headers.common['Authorization'] = `Bearer ${ACCESS_TOKEN}`;\n\nexport const getMovies = (pathName, params = {}) => {\n  const resolve = moviesAPI\n    .get(pathName, { params: { ...params } })\n    .catch(error => console.log(error.message));\n  return resolve;\n};\n"],"names":["CastGrid","styled","id","useParams","useState","cast","setCast","useEffect","getMovies","then","data","catch","error","console","log","message","length","map","profile_path","name","original_name","character","src","image","alt","moviesAPI","axios","baseURL","defaults","headers","common","pathName","params","resolve","get"],"sourceRoot":""}