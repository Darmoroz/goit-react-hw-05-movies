{"version":3,"file":"static/js/635.b96dcbd3.chunk.js","mappings":"sMAEaA,E,OAAaC,GAAAA,GAAH,8V,SCmBvB,EAlBsB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACJ,EAAD,UACGE,EAAOG,KAAI,YAAkC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACxB,OACE,2BACE,SAAC,KAAD,CAAMC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,SACGI,KAEH,0BAAOC,EAAaI,QAAQ,OAJrBN,EAOZ,KAGN,C,4GClBYO,E,OAAaZ,GAAAA,KAAH,0K,SCmCvB,EAjCkB,SAAC,GAAkB,IAAhBa,EAAe,EAAfA,SACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,iCACE,eACEC,MAAO,CACLC,aAAc,OACdC,UAAW,SACXC,cAAe,aAJnB,SAMC,kBAGD,UAACR,EAAD,CAAYC,SAjBK,SAAAQ,GACnBA,EAAEC,iBACFT,EAASE,GACTC,EAAS,GACV,EAaG,WACE,kBAAOO,KAAK,OAAOC,MAAOT,EAAOU,SAtBlB,SAAAJ,GACnBL,EAASK,EAAEK,OAAOF,MACnB,KAqBK,mBAAQD,KAAK,SAASI,UAAWZ,EAAjC,SAAwC,YAM/C,E,2ECcD,EA1Ce,WAAO,IAAD,EACnB,GAAwCa,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsChB,EAAAA,EAAAA,UAAS,IAA/C,eAAOiB,EAAP,KAAoBC,EAApB,KAEMjB,EAAK,UAAGc,EAAaI,IAAI,gBAApB,QAAgC,GACrCC,GAAQC,EAAAA,EAAAA,WAEdC,EAAAA,EAAAA,YAAU,WACHrB,IAILsB,EAAAA,EAAAA,GAAU,eAAgB,CAAEtB,MAAAA,IACzBuB,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPP,EAAeO,EAAKC,SACpBN,EAAMO,QAAUF,EAAKG,aACtB,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,GACf,GAAE,CAAChC,IAMJ,OACE,iCACE,SAAC,EAAD,CAAWF,SANK,SAAAE,GAClBe,EAAgB,CAAEf,MAAAA,GACnB,KAKe,OAAXgB,QAAW,IAAXA,OAAA,EAAAA,EAAaiB,QAAS,GAAKjC,IAC1B,SAACkC,EAAA,EAAD,CAAehD,OAAQ8B,IAEN,IAAlBG,EAAMO,SAAiB1B,IACtB,gBACEmC,IAAKC,EACLC,IAAI,YACJnC,MAAO,CACLoC,UAAW,YAMtB,C,mEC5CKC,E,OAAYC,EAAAA,OAAa,CAC7BC,QAAS,kCAEXF,EAAUG,SAASC,QAAQC,OAA3B,+BALE,uNAOK,IAAMtB,EAAY,SAACuB,GAA2B,IAAjBC,EAAgB,uDAAP,CAAC,EACtCC,EAAUR,EACbrB,IAAI2B,EAAU,CAAEC,QAAO,UAAMA,KAC7BlB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,IACd,OAAOe,CACR,C","sources":["components/MoviesGallery/MoviesGallery.styled.jsx","components/MoviesGallery/MoviesGallery.jsx","components/SearchBar/SearchBar.sryled.jsx","components/SearchBar/SearchBar.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesGrid = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  font-size: 16px;\n  li {\n    display: grid;\n    grid-template-columns: 8fr 1fr;\n    a {\n      color: #0077cc;\n      text-decoration: none;\n      :hover {\n        color: rgba(0, 119, 204, 0.5);\n      }\n    }\n    span {\n      font-weight: 500;\n    }\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { MoviesGrid } from './MoviesGallery.styled';\n\nconst MoviesGallery = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesGrid>\n      {movies.map(({ id, title, vote_average }) => {\n        return (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n            <span>{vote_average.toFixed(1)}</span>\n          </li>\n        );\n      })}\n    </MoviesGrid>\n  );\n};\nexport default MoviesGallery;\n","import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  justify-content: center;\n  font-size: 20px;\n  input {\n    line-height: 1.5;\n  }\n  button {\n    font-weight: bold;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormStyled } from './SearchBar.sryled';\n\nconst SearchBar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <h2\n        style={{\n          marginBottom: '16px',\n          textAlign: 'center',\n          textTransform: 'uppercase',\n        }}\n      >\n        Search Movie\n      </h2>\n      <FormStyled onSubmit={handleSubmit}>\n        <input type=\"text\" value={query} onChange={handleChange} />\n        <button type=\"submit\" disabled={!query}>\n          GO\n        </button>\n      </FormStyled>\n    </>\n  );\n};\nexport default SearchBar;\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useSearchParams } from 'react-router-dom';\nimport SearchBar from '../components/SearchBar/SearchBar';\nimport { useEffect, useState, useRef } from 'react';\n\nimport image from 'assets/images/error-404.webp';\nimport { getMovies } from '../services/api';\nimport MoviesGallery from '../components/MoviesGallery/MoviesGallery';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [queryMovies, setQueryMovies] = useState([]);\n\n  const query = searchParams.get('query') ?? '';\n  const total = useRef();\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    getMovies('search/movie', { query })\n      .then(({ data }) => {\n        setQueryMovies(data.results);\n        total.current = data.total_results;\n      })\n      .catch(error => console.log(error.message));\n  }, [query]);\n\n  const updateQuery = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={updateQuery} />\n      {queryMovies?.length > 0 && query && (\n        <MoviesGallery movies={queryMovies} />\n      )}\n      {total.current === 0 && query && (\n        <img\n          src={image}\n          alt=\"not found\"\n          style={{\n            marginTop: '20px',\n          }}\n        />\n      )}\n    </>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\n\nconst ACCESS_TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2ZDc5OTA1N2VkMWUzY2JiZmVjOTBhNzYyZmUxOWQ5OCIsInN1YiI6IjY0OGMyNjg0NTU5ZDIyMDExYzRiMzgwYSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.1RdcZoV5IPYOcFbCXJNJ1aLnntukhilkV6un6kG6ZoU';\n\nconst moviesAPI = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\nmoviesAPI.defaults.headers.common['Authorization'] = `Bearer ${ACCESS_TOKEN}`;\n\nexport const getMovies = (pathName, params = {}) => {\n  const resolve = moviesAPI\n    .get(pathName, { params: { ...params } })\n    .catch(error => console.log(error.message));\n  return resolve;\n};\n"],"names":["MoviesGrid","styled","movies","location","useLocation","map","id","title","vote_average","to","state","from","toFixed","FormStyled","onSubmit","useState","query","setQuery","style","marginBottom","textAlign","textTransform","e","preventDefault","type","value","onChange","target","disabled","useSearchParams","searchParams","setSearchParams","queryMovies","setQueryMovies","get","total","useRef","useEffect","getMovies","then","data","results","current","total_results","catch","error","console","log","message","length","MoviesGallery","src","image","alt","marginTop","moviesAPI","axios","baseURL","defaults","headers","common","pathName","params","resolve"],"sourceRoot":""}